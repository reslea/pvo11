#!markdown

### Тесты

Разработчикам важно тестировать собственный код. И один из популярных методов это делать - использовать unit-тесты.

**unit-тест** - тесты, которые проверяют один сценарий одного взаимодействия одного объекта.
Например, если у нас есть калькулятор, мы можем сначала проверить правильно ли он складывает обычные числа. Потом попробовать сложить отрицательные. Потом дробные и т.д.
Для каждого из этих сценариев нам нужно будет описать отдельный тест.

Для работы с тестами важно создать отдельный проект типа **"xUnit test project"**
к нему уже будут подключены необходимые библиотеки.

#!markdown

Также, важно добавить окно для вывода результатов тестов в VisualStudio

в меню **Test => Test Explorer**

#!markdown

Правила построения теста:

1. Создаем тестовые данные и формируем ожидания к тесту
2. Делаем вызов метода, который тестируем
3. Сверяем ожидания с полученным результатом от метода

#!csharp

// проект использует библиотеку xUnit
// ниже ссылка для того, чтоб сослаться на неё из этой заметки
#r "nuget:xUnit"
using Xunit;

#!markdown

Тест считается пройденным, если тестовый метод выполнился полностью. Соответственно нам важно делать проверки и прерывать выполнение теста, если они не пройдены.

Для пометки тестовых методов используется `[Fact]`

осуществления проверок производится используя методы класса `Assert`

#!csharp

// пример теста
[Fact]
void Parse_Works()
{
    string fourStr = "4";
    int expectedResult = 4;

    Assert.Equal(expectedResult, int.Parse(fourStr));
}

#!markdown

Объявив такой метод мы почти сразу увидем его в **Test Explorer**

После этого мы можем запускать тесты по отдельности или "пачками"
Также, тесты можно запускать в режиме отладки (debug), это значительно помогает понять что пошло не так, если тест не пройден.

#!markdown

#### Полезные методы класса `Assert`:
* Для объектов:
    * `Equal(expected, actual)` - сравнивает объекты и убеждается что они равны
    * `NotEqual(expected, actual)` - сравнивает объекты и убеждается что они **не** равны    
    * `IsNull(actual)` - убеждается что объект равен `null`
    * `IsNotNull(actual)` - убеждается что объект **не** равен `null`
* Для условий:
    * `Assert.True(condition)` - проверяет что условие истинно
    * `Assert.False(condition)` - проверяет что условие ложно
* Для коллекций:
    * `Contains(collection, item)` - проверяет что `item` находится в коллекции.
    * `DoesNotContain(collection, item)` - проверяет что `item` **не** находится в коллекции.
    * `Empty(collection)` - проверяет что коллекция пустая
    * `NotEmpty(collection)` - проверяет что коллекция **не** пустая
