#!markdown

LINQ - "язык интегрированных запросов"
набор методов в C#, которые предоставляют универсальные механизмы работы с коллекциями - поиск, выбока, сортировки и т.д.

 Подобные механизмы есть и в других языках - "Array methods" в JavaScript, "Stream API" в Java, встоенные функции в Python и т.д.

 Пример на C# выборки четных элементов из коллекци, отсортированных по возрастанию.

#!csharp

List<int> numbers = new() { 500, 101, 13, 188, 15, 200 };

numbers
    .Where(n => n % 2 == 0)
    .OrderBy(n => n)

#!markdown

Есть очень много LINQ-методов, которые будут с примерами расписаны ниже, но основной их механизм работы -- использование комбинации следующих функциональностей:
#### делегаты/ссылки на функции (Func/Action)

пример - метод `.Where`, принимающий функцию фильтрации (предикат), которая получив объект коллекции возвращает `true/false`. Например: `.Where(n => n % 2 == 0)`.
####  методы расширения [документация](https://docs.microsoft.com/ru-ru/dotnet/csharp/programming-guide/classes-and-structs/extension-methods), [пример с пары](https://github.com/reslea/pvo11/blob/master/LinqExpressions/VectorExtentions.cs)
каждый из LINQ-методов привязан с помощью методов расширения к минималистичному интефрейсу `IEnumerable<T>`
####  обобщений (generics)
лямбды, переданные в качестве аргументов LINQ-методов "подстраиваются" под тип элементов коллекции, что обеспечивает гибкость и безопасность типов, а также подсказки компилятора.

#!markdown

### Популярные LINQ-методы:

#### Эти методы делают то же, что и одноименные конструкции в SQL:
* **Select** - для каждого элемента коллекции, возвращает другой объект (например принимает строку, возвращает спаршенное с этой строки число)
* **Where** - делает выборку по коллекции
* **OrderBy** - упорядочивает элементы по возрастанию
* **OrderByDescending** - упорядочивает элементы по убыванию
* **Distinct** - пропускает дубликаты (используя стандартный механизм сравнения `==`)
* **Sum** - подсчитывает сумму по какому-то свойству для всех элементов коллекции
* **Count** - подсчитывает количество элементов коллекции

#### Другие популярные методы:
* **Concat** - возвращает новую коллекцию, объединяя две коллекции
* **Skip** - возвращает нову коллекцию, пропустив при этом первые `n` элементов
* **Take** - возвращает новую коллекцию, взяв при этом первые `n` элементов
* **First** - возвращает первый элемент коллекции или исключение, если коллекция пуста
