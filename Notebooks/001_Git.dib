#!markdown

## Базовые команды и сценарии по работе с гитом

### Информирование:
* `git status` -- узнать в какой ветке мы находимся, что поменялось и т.д.
* `git log` -- посмотреть историю изменения текущей ветки


### Работа с локальным хранилищем истории (репозиторием):
* `git init` -- инициализировать гит в папке (обычно пустой)
* `git add .` или `git add _имя файла_` -- подготовить файлы к коммиту
* `git commit -m "описание изменений"` -- зафиксировать и описать изменение в истории (коммит) 
* или же `git commit -a -m "описание изменений"` -- подготовить все изменения и зафиксировать коммит

### работа в ветках:
* `git checkout _имя-ветки_` -- для перехода между ветками
* `git checkout -b _имя-ветки_` -- создать новую ветку и перейти в неё
* `git checkout _id-коммита_` -- для перехода к конкретному состоянию проекта
* `git checkout .` -- для перехода в последний коммит текущей ветки

### добавление кода с ветки в master:
1. `git checkout master` -- переход в мастер
2. `git merge имя-ветки` -- все коммиты с этой ветки добавятся в мастер


### Работа с удаленным репозиторем
#### "скачать" код и поработать с ним:
`git clone https://github.com/_пользователь_/_репозиторий_.git`
после этого локально у вас появится ветка `master`.

* `git push` -- для отправки последних локальных коммитов на сервер
* `git pull` -- для получения последних коммитов с сервера

Если хотите создать ветку и отправить её на сервер:
1. Создать ветку  `git checkout -b имя-ветки`
2. отправить её  `git push -u origin имя-ветки`
