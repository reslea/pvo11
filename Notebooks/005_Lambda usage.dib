#!markdown

### Использование лямбда-функций

Лямбда-функции используют в методах, для того, чтоб сделать их максимально гибкими.

Например мы можем написать универсальный метод для фильтрации коллекции.

Если элементы коллекции типа `T`, то функция-фильтр, приняв значение этого типа должна определить удовлетворяет объект требованиям или нет, например:

#!csharp

IEnumerable<T> Filter<T>(IEnumerable<T> collection, Func<T, bool> filterFunc)
{
    foreach(T item in collection)
    {
        if(filterFunc(item))
            yield return item;
    }
}

#!markdown

Имея в арсенале один такой метод мы сможем фильтровать любые колелкции по любому принципу, ведь все они реализовуют интерфейс `IEnumerable<T>`:

#!csharp

int[] intArr = new int[] { 1,2,3,4 };
var even = Filter(intArr, x => x % 2 == 0);

IEnumerable<string> stringEnumerable = new List<string> { "x", "xx", "xxx" };
var longStrings = Filter(stringEnumerable, s => s.Length >= 2);

var heroes = new List<Hero> {
    new Hero { FirstName = "Peter", LastName = "Parker", Age = 16, IsAvenger = true },
    new Hero { FirstName = "Molly", LastName = "Jane", Age = 16, IsAvenger = false },
    new Hero { FirstName = "Tony", LastName = "Stark", Age = 48, IsAvenger = true },
    new Hero { FirstName = "Steve", LastName = "Rogers", Age = 100, IsAvenger = true },
    new Hero { FirstName = "Steven", LastName = "Strange", Age = 42, IsAvenger = false },
};

var avengers = Filter(heroes, h => h.IsAvenger);
var adults = Filter(heroes, h => h.Age >= 21);
var nameS = Filter(heroes, h => h.FirstName.StartsWith('S'));

class Hero
{
    public string FirstName { get; set; }
    public string LastName { get; set; }
    public int Age { get; set; }
    public bool IsAvenger { get;set; }
}
